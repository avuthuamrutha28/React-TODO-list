import React, { useState } from 'react';
import { AiFillEdit } from "react-icons/ai";

export type Task = {
  id: string;
  title: string;
  description: string;
  dueDate: string;
  priority: 'LOW' | 'MEDIUM' | 'HIGH';
  status: 'PENDING' | 'IN_PROGRESS' | 'COMPLETED';
  archived: boolean;
};

type Props = {
  tasks: Task[];
};
const ITEMS_PER_PAGE = 1;
  const TaskTable: React.FC<Props> = ({ tasks: initialTasks }) => {
  const [searchText, setSearchText] = useState('');
  const [tasks, setTasks] = useState<Task[]>(() => [...initialTasks]);
  const [currentPage, setCurrentPage] = useState<number>(1);
  const [editingTaskId, setEditingTaskId] = useState<string | null>(null);
  const [editedField, setEditedField] = useState<keyof Task | ''>('');
  const [editedValue, setEditedValue] = useState<string>('');

   



  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchText(event.target.value);
  };

  const handleEditClick = (taskId: string, field: keyof Task, value: string) => {
    setEditingTaskId(taskId);
    setEditedField(field);
    setEditedValue(value);
  };

  const handleEditSave = () => {
    if (!editingTaskId || !editedField) return;
    const updatedTasks = tasks.map(task =>
      task.id === editingTaskId ? { ...task, [editedField]: editedValue } : task
    );
    setTasks(updatedTasks);
    setEditingTaskId(null);
    setEditedField('');
    setEditedValue('');
  };











  
  const handleStatusChange = (id: string, newStatus: Task['status']) => {
    const updatedTasks = tasks.map((task) =>
      task.id === id ? { ...task, status: newStatus } : task
    );
    setTasks(updatedTasks);
  };

    const filteredTasks = tasks.filter((task) => {
    const lowerSearch = searchText.toLowerCase();
    return (
      task.title.toLowerCase().includes(lowerSearch) ||
      task.description.toLowerCase().includes(lowerSearch)
    );
  });
  const totalPages = Math.ceil(filteredTasks.length / ITEMS_PER_PAGE);
   const startIndex = (currentPage - 1) * ITEMS_PER_PAGE;
   const currentTasks = filteredTasks.slice(startIndex, startIndex + ITEMS_PER_PAGE);


  return (
    <div className="table-container">
      <h2 className="table-title">TODO LIST</h2>

      <input
        type="text"
        placeholder="Search by title"
        value={searchText}
        onChange={handleSearchChange}
        className="table-search"
      />
      <table className="task-table">
        <thead>
          <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Description</th>
            <th>Due Date</th>
            <th>Priority</th>
            <th>Status</th>
            <th>Archived</th>
          </tr>
        </thead>
        <tbody>
          {filteredTasks.length === 0 ? (
            <tr>
              <td colSpan={7}>No tasks</td>
            </tr>
          ) : (
            currentTasks.map((task) => (
              <tr key={task.id}>
                <td>{task.id}</td>

                <td>
                  {editingTaskId === task.id && editedField === 'title' ? (
                    <input
                      value={editedValue}
                      onChange={e => setEditedValue(e.target.value)}
                      onBlur={handleEditSave}
                      autoFocus
                    />
                  ) : (
                    <>
                      {task.title}
                      <button
                        className="table-edit-button"
                        onClick={() => handleEditClick(task.id, 'title', task.title)}
                      >
                        <AiFillEdit />
                      </button>
                    </>
                  )}
                </td>

                <td>
                  {editingTaskId === task.id && editedField === 'description' ? (
                    <input
                      value={editedValue}
                      onChange={e => setEditedValue(e.target.value)}
                      onBlur={handleEditSave}
                      autoFocus
                    />
                  ) : (
                    <>
                      {task.description}
                      <button
                        className="table-edit-button"
                        onClick={() => handleEditClick(task.id, 'description', task.description)}
                      >
                        <AiFillEdit />
                      </button>
                    </>
                  )}
                </td>

                <td>
                  {editingTaskId === task.id && editedField === 'dueDate' ? (
                    <input
                      type="date"
                      value={editedValue}
                      onChange={e => setEditedValue(e.target.value)}
                      onBlur={handleEditSave}
                      autoFocus
                    />
                  ) : (
                    <>
                      {task.dueDate}
                      <button
                        className="table-edit-button"
                        onClick={() => handleEditClick(task.id, 'dueDate', task.dueDate)}
                      >
                        <AiFillEdit />
                      </button>
                    </>
                  )}
                </td>

                <td>
                  {editingTaskId === task.id && editedField === 'priority' ? (
                    <select
                      value={editedValue}
                      onChange={e => setEditedValue(e.target.value)}
                      onBlur={handleEditSave}
                      autoFocus
                    >
                      <option value="LOW">LOW</option>
                      <option value="MEDIUM">MEDIUM</option>
                      <option value="HIGH">HIGH</option>
                    </select>
                  ) : (
                    <>
                      {task.priority}
                      <button
                        className="table-edit-button"
                        onClick={() => handleEditClick(task.id, 'priority', task.priority)}
                      >
                        <AiFillEdit />
                      </button>
                    </>
                  )}
                </td>

                <td>
                  <select
                    value={task.status}
                    onChange={e =>
                      handleStatusChange(task.id, e.target.value as Task['status'])
                    }
                  >
                    <option value="PENDING">Pending</option>
                    <option value="IN_PROGRESS">In Progress</option>
                    <option value="COMPLETED">Completed</option>
                  </select>
                </td>

                <td>{task.archived ? 'Yes' : 'No'}</td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {totalPages > 1 && (
        <div style={{ marginTop: '16px', textAlign: 'center' }}>
          {[...Array(totalPages)].map((_, i) => (
            <button
              key={i + 1}
              onClick={() => setCurrentPage(i + 1)}
              style={{
                margin: '0 5px',
                padding: '6px 12px',
                backgroundColor: currentPage === i + 1 ? '#87CEEB' : '#eee',
                color: currentPage === i + 1 ? '#fff' : '#000',
                border: '1px solid #000',
                borderRadius: '4px',
              }}
            >
              {i + 1}
            </button>
          ))}
        </div>
      )}
    </div>
  );
};

export default TaskTable;
